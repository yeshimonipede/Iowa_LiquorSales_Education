knitr::opts_chunk$set(echo = TRUE)
merged_data <- read.csv("data/Gin_LiquorSales_Education.csv")
knitr::opts_chunk$set(echo = TRUE)
merged_data <- read.csv("data/Gin_LiquorSales_Education.csv")
library(forecast)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
# Convert the date column to Date format
merged_data$date <- as.Date(merged_data$date)
# Group the data by 'date and summarize to calculate the sum of each variable for each date
aggregated_data <- merged_data %>%
group_by(date) %>%
summarize(total_sale_dollars = sum(sale.dollars),
total_sale_volume = sum(sale.volume),
total_sale_bottles = sum(sale.bottles))
# Print the aggregated data frame
print(aggregated_data)
# Plotting
ggplot(aggregated_data, aes(x = date)) +
geom_line(aes(y = total_sale_dollars, color = "Sales ($)")) +
geom_line(aes(y = total_sale_volume, color = "Volume (Liters)")) +
geom_line(aes(y = total_sale_bottles, color = "Bottles Sold")) +
labs(x = "Date", y = "Value", color = "Legend") +
ggtitle("Aggregated Sales, Volume, and Bottles Sold Over Time") +
theme_minimal()
# Extract Year from the date column
merged_data$year <- (lubridate::year(merged_data$date))
# Creating an aggregated dataset based on year and quarter
aggregated_data <- merged_data %>%
group_by(year, quarter) %>%
summarize(total_sale_dollars = sum(sale.dollars),
total_sale_volume = sum(sale.volume),
total_sale_bottles = sum(sale.bottles)) %>%
mutate(year_quarter = paste0(as.character(year), quarter))
# Print the updated aggregated data frame
print(aggregated_data)
# Create a date column using the year and quarter components
aggregated_data$date <- as.Date(paste0(aggregated_data$year, "-", aggregated_data$quarter), format = "%Y-%m")
# Convert to quarterly time series for sales (dollars)
ts_data_dollars <- ts(aggregated_data$total_sale_dollars, frequency = 4, start = c(min(aggregated_data$year), 1))
# Convert to quarterly time series for sales (bottles)
ts_data_bottles <- ts(aggregated_data$total_sale_bottles, frequency = 4, start = c(min(aggregated_data$year), 1))
# Convert to quarterly time series for sales (volume)
ts_data_volume <- ts(aggregated_data$total_sale_volume, frequency = 4, start = c(min(aggregated_data$year), 1))
# Fit the snaive model
snaive_model_dollars <- snaive(ts_data_dollars)
# Forecast for the next 4 quarters
forecast_result_dollars<- forecast(snaive_model_dollars, h = 8)
# Print the forecast
print(forecast_result_dollars)
autoplot(forecast_result_dollars) +
autolayer(ts_data_dollars, series = "Seasonal naive model") +
xlab("Year") +
ylab("Total Sale Dollars") +
ggtitle("Forecast of Total Sale Dollars") +
guides(colour = guide_legend(title = "Forecast"))
# Fit the ARIMA model
arima_model <- auto.arima(ts_data_dollars)
# Forecast for the next 8 quarters
forecast_result_arima <- forecast(arima_model, h = 8)
# Print the ARIMA forecast
print(forecast_result_arima)
# Plot the ARIMA forecast
autoplot(forecast_result_arima) +
autolayer(ts_data_dollars, series = "Actual") +
xlab("Year") +
ylab("Total Sale Dollars") +
ggtitle("ARIMA Forecast of Total Sale Dollars") +
guides(colour = guide_legend(title = "Forecast"))
# Fit the snaive model
snaive_model_bottles <- snaive(ts_data_bottles)
# Forecast for the next 4 quarters
forecast_result_bottles <- forecast(snaive_model_bottles, h = 8)
# Print the forecast
print(forecast_result_bottles)
autoplot(forecast_result_bottles) +
autolayer(ts_data_bottles, series = "Seasonal Naive Model") +
xlab("Year") +
ylab("Total Sale (Bottles)") +
ggtitle("Forecast of Total Sale (Bottles)") +
guides(colour = guide_legend(title = "Forecast"))
# Fit the snaive model
snaive_model_volume <- snaive(ts_data_volume)
# Forecast for the next 4 quarters
forecast_result_volume <- forecast(snaive_model_volume, h = 8)
# Print the forecast
print(forecast_result_volume)
autoplot(forecast_result_volume) +
autolayer(ts_data_volume, series = "Seasonal Naive Model") +
xlab("Year") +
ylab("Total Sale (Volume)") +
ggtitle("Forecast of Total Sale (Volume)") +
guides(colour = guide_legend(title = "Forecast"))
# Extract Year from the date column
merged_data$year <- lubridate::year(merged_data$date)
# Creating an aggregated dataset based on year, quarter, and county
aggregated_data_county <- merged_data %>%
group_by(year, quarter, county) %>%
summarize(total_sale_dollars = sum(sale.dollars),
total_sale_volume = sum(sale.volume),
total_sale_bottles = sum(sale.bottles)) %>%
mutate(year_quarter = paste0(year, quarter))
# Print the updated aggregated data frame
print(aggregated_data_county)
# Filter the aggregated data to include only rows where the county is "Adair"
aggregated_data_adair <- filter(aggregated_data, county == "Adair")
